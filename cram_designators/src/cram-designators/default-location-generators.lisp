;;;
;;; Copyright (c) 2010, Lorenz Moesenlechner <moesenle@in.tum.de>
;;; All rights reserved.
;;; 
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions are met:
;;; 
;;;     * Redistributions of source code must retain the above copyright
;;;       notice, this list of conditions and the following disclaimer.
;;;     * Redistributions in binary form must reproduce the above copyright
;;;       notice, this list of conditions and the following disclaimer in the
;;;       documentation and/or other materials provided with the distribution.
;;;     * Neither the name of the Intelligent Autonomous Systems Group/
;;;       Technische Universitaet Muenchen nor the names of its contributors 
;;;       may be used to endorse or promote products derived from this software 
;;;       without specific prior written permission.
;;; 
;;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
;;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;; POSSIBILITY OF SUCH DAMAGE.
;;;

(in-package :desig)

(register-location-generator
 10 designator-prolog-desig-solution-generator
 "Returns all solutions generated by the predicate 
\(desig-solution ?desig ?solution\)")

(register-location-validation-function
 10 designator-prolog-desig-solution-validator
 "Makes sure that designator solutions for designators using the
 DESIG-SOLUTION predicate reject all invalid solutions.")

(defun designator-prolog-desig-solution-generator (desig)
  (lazy-mapcar (curry #'var-value '?solution)
               (prolog `(desig-solution ,desig ?solution))))

(defun designator-prolog-desig-solution-validator (designator solution)
  (let ((solutions (designator-prolog-desig-solution-generator designator)))
    (cond (solutions
           (lazy-dolist (candidate solutions :maybe-reject)
             (when (designator-solutions-equal candidate solution)
               (return :accept))))
          (t :unknown))))

(def-fact-group location-designator-generators (desig-solution)
  (<- (desig-solution ?desig ?solution)
    (loc-desig? ?desig)
    (desig-prop ?desig (pose ?solution)))

  (<- (desig-solution ?desig ?solution)
    (loc-desig? ?desig)
    (desig-prop ?desig (of ?obj))
    (lisp-fun current-desig ?obj ?curr-obj)
    (desig-prop ?curr-obj (at ?loc))
    (desig-solutions ?loc ?locations)
    (member ?solution ?locations)))
